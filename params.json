{"name":"Spring-integration","tagline":"","body":"### Welcome to my Github Spring-integration-java-dsl repository!\r\n   \r\n   This repository contains samples, questions&answers posted to spring-integration authors. Thanks to @garyrussell and @artembilan for their support.\r\n   \r\n**Why dsl than xml?**\r\n\r\nJava dsl is better in a way that we don't need to write complex xml integration tags, more writing to define each components. Java dsl is more reable, more resuable.\r\n\r\nReference: [Spring-Integration-Java-DSL-Reference] (https://github.com/spring-projects/spring-integration-java-dsl/wiki/Spring-Integration-Java-DSL-Reference).\r\n\r\n####Sample Flow:\r\n         \r\nA sample outbound gateway can have  transformer which transform the canonical object to request object, header enricher which enriches header values, and call the outbound gateway and then transform the response object to canonical response object. This can be code in below dsl way. \r\n\r\n*Gateway:*\r\n```java\r\n  @MessagingGateway\r\n  public interface HelloGateway {\r\n    @Gateway(requestChannel = \"helloRequestChannel\")\r\n    String sayHello(String payload);\r\n  }\r\n ```\r\n *Channel definition:*\r\n ```java\r\n @Bean\r\n public MessageChannel helloRequestChannel(){\r\n   return MessageChannels.direct().get();\r\n }\r\n ```\r\n *Integration flow:*\r\n ```java\r\n  @Bean\r\n  public IntegrationFlow sayHelloFlow(){\r\n   return IntegrationFlow.from(\"helloRequestChannel\")\r\n                         .transform(requestTransformer)\r\n                         .enrichHeaders(headerEnricher)\r\n                         .handle(httpOutboundGateway)\r\n                         .transform(responseTransformer)\r\n                         .get();\r\n   }\r\n```\r\n*How to invoke the gateway*\r\n   1. Invoke through simple java invocation.\r\n   2. Put message into the channel.\r\n\r\n```java\r\n  sayHello(\"dsl\"); // Java method invocation.\r\n```\r\n```xml\r\n<!-- below enricher puts payload into the channel we defined above and sets into property as usual. -->\r\n  <int:enricher input-channel=\"HELLO_ENRCH_CHNL\"\r\n\t\trequest-channel=\"helloRequestChannel\">\r\n\t\t<int:property name=\"name\" expression=\"payload.name\" />\r\n\t</int:enricher>\r\n```\r\nWorking example represents above can be found [here](https://github.com/manojp1988/spring-integration/tree/master/javadsl/src/main/java/enrichPayload).\r\n\r\nIf you see above, you can find the difference how dsl improves readability. Instead of we defining channels, spring generates channels for us. And you can see them if you enable logging.\r\n\r\nAll channels are created based on the flow name we define. If you see from above example, spring generates sayHelloFlow.channel#0, sayHelloFlow.channel#1 etc. \r\n\r\n\r\n*Advice*\r\n```java\r\n @Aspect\r\n  public static class GatewayAdvice {\r\n    @Before(\"execution(* advice.AdviceExample.HelloGateway.sayHello(*))\")\r\n    public void beforeAdvice() {\r\n      System.out.println(\"Before advice called...\");\r\n    }\r\n```\r\n\r\n \r\n","google":"UA-66020518-1","note":"Don't delete this file! It's used internally to help with page regeneration."}